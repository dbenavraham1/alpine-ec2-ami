@PYTHON@

import json, os, shutil, sys, time
from pyhocon import ConfigFactory

script_dir = os.path.dirname(os.path.realpath(__file__))

profile = sys.argv[1]

# path to the profile config file
profile_conf = os.path.join(script_dir, '..', 'profiles', profile + '.conf')

# where we store profile's builds
profile_dir = os.path.join(script_dir, 'profile')

# TODO? make these dicts instead?
# fold these list vars down to scalar
fold_list_keys = [
    'ami_access', 'ami_regions'
]

# parse/resolve HOCON profile config, we need just the 'builds' portion
builds = ConfigFactory.parse_file(profile_conf)['builds']

# clean out any old builds
if os.path.exists(profile_dir):
    shutil.rmtree(profile_dir)
os.makedirs(profile_dir)

# for each build
for bk, b in builds.items():

    # make profile build directory
    build_dir = os.path.join(profile_dir, bk)
    os.makedirs(build_dir)
    vars_file = os.path.join(build_dir, 'vars.json')

    # populate profile build vars
    b['profile'] = profile
    b['profile_build'] = bk

    # edge-related temporal substitutions
    if b['end_of_life'] == '@TODAY@':
        b['end_of_life'] = time.strftime('%Y-%m-%d', time.gmtime())
    if b['revision'] == '@NOW@':
        b['revision'] = time.strftime('%Y%m%d%H%M%S', time.gmtime())

    # fold list vars to scalars
    for k in fold_list_keys:
        if k in b and isinstance(b[k], list):
            b[k] = ','.join(str(x) for x in b[k])

    # fold 'repos' hash to scalar
    repos = []
    for repo, v in b['repos'].items():
        if v == True:
            # repo without alias
            repos.append(repo)
        elif not (v == False or v == None):
            # repo with alias (skip repo when false/null)
            v.lstrip('@')
            repos.append(f"@{v} {repo}")
    b['repos'] = ','.join(str(x) for x in repos)

    # fold 'pkgs' hash to scalar
    pkgs = []
    for pkg, v in b['pkgs'].items():
        if v == True:
            # unpinned package
            pkgs.append(pkg)
        elif not (v == False or v == None):
            # repo-pinned package (skip pkg when false/null)
            v.lstrip('@')
            pkgs.append(f'{pkg}@{v}')
    b['pkgs'] = ','.join(str(x) for x in pkgs)

    # fold 'svcs' hash to scalar
    svcs = {
        'sysinit': [],
        'boot': [],
        'default': [],
        'shutdown': []
    }
    for svc, v in b['svcs'].items():
        if v == True:
            # service in default runlevel
            svcs['default'].append(svc)
        elif not (v == False or v == None):
            # service in specified runlevel (skip svc when false/null)
            svcs[v].append(svc)
    b['svcs'] = ':'.join(str(l) + '=' + ','.join(str(s) for s in ss) for l, ss in svcs.items())

    # write build def json file
    with open(vars_file, 'w') as out:
        json.dump(b, out, indent=4, separators=(',', ': '))
